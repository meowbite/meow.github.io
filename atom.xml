<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meowbite</title>
  
  <subtitle>认真生活~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meowbite.github.io/"/>
  <updated>2018-08-30T02:46:24.000Z</updated>
  <id>http://meowbite.github.io/</id>
  
  <author>
    <name>meow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang开发环境搭建</title>
    <link href="http://meowbite.github.io/2018/08/09/golang-mvc/"/>
    <id>http://meowbite.github.io/2018/08/09/golang-mvc/</id>
    <published>2018-08-09T00:50:27.000Z</published>
    <updated>2018-08-30T02:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">├── LICENSE</div><div class="line">├── cmd</div><div class="line">│   └── root.go   //入口</div><div class="line">├── config       //配置</div><div class="line">├── main.go</div><div class="line">├── pkg           </div><div class="line">└── server</div><div class="line">    ├── controller     </div><div class="line">    ├── metric         //上报监控</div><div class="line">    ├── middleware     //第三方认证之类</div><div class="line">    ├── server.go      //routers 和controller初始化</div><div class="line">    ├── service        //dao</div><div class="line">    └── utils          //工具函数</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="草稿" scheme="http://meowbite.github.io/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins (一) 基础介绍</title>
    <link href="http://meowbite.github.io/2018/07/25/pipeline-intro/"/>
    <id>http://meowbite.github.io/2018/07/25/pipeline-intro/</id>
    <published>2018-07-25T01:48:56.000Z</published>
    <updated>2018-07-25T02:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h1><ul><li>本系列文档用于总结jenkins常用知识，围绕jenkins pipeline、docker等相关内容展开。</li></ul><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>Pre install:<ul><li>java 8</li><li>Docker</li></ul></li></ul><h2 id="Download-and-run-Jenkins"><a href="#Download-and-run-Jenkins" class="headerlink" title="Download and run Jenkins"></a>Download and run Jenkins</h2><ul><li>Download jenkins: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</div></pre></td></tr></table></figure><ul><li>Run:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar jenkins.war --httpPort=8080</div></pre></td></tr></table></figure><ul><li>Browse to:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本系列文档用于总结jenkins常用知识，围绕jenkins pipeline、docker等相关内容展开。&lt;/
      
    
    </summary>
    
    
      <category term="jenkins" scheme="http://meowbite.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins-cli 学习</title>
    <link href="http://meowbite.github.io/2018/06/21/jenkins-cli-md/"/>
    <id>http://meowbite.github.io/2018/06/21/jenkins-cli-md/</id>
    <published>2018-06-21T02:19:35.000Z</published>
    <updated>2018-08-30T02:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/06/21/jenkins-cli-md/../jenkins-cli-md/jenkins-logo.jpeg" alt=""></p><h1 id="文档简介"><a href="#文档简介" class="headerlink" title="文档简介"></a>文档简介</h1><ul><li>jenkins CLI 是jenkins提供的命令行工具。</li><li>使用jenkins CLI 我们可以在命令行上操作jenkins。</li><li>也可以利用jenkins CLI 开发定制化工具。<h1 id="下载client"><a href="#下载client" class="headerlink" title="下载client"></a>下载client</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$wget http://URL/jnlpJars/jenkins-cli.jar</div></pre></td></tr></table></figure></li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 免密访问时</div><div class="line">java -jar jenkins-cli.jar -noKeyAuth -s http://localhost:8080/ help</div><div class="line"></div><div class="line"># 需要认证时</div><div class="line"></div><div class="line">java -jar jenkins-cli.jar -noKeyAuth -s http://localhost:8080/ help --username admin</div></pre></td></tr></table></figure><h1 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h1><p><img src="/2018/06/21/jenkins-cli-md/./jenkins-cli.png" alt=""></p><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><p>pipeline类型的job，经常遇到找不见的case<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$java -jar jenkins-cli.jar -noKeyAuth  -s http://localhost:8080/ build abcd-cde  --username admin</div><div class="line"></div><div class="line">ERROR: No such job &apos;abcd-cde&apos;; perhaps you meant &apos;test-growth&apos;</div></pre></td></tr></table></figure></p><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><ul><li>gojenkins: <a href="https://godoc.org/github.com/bndr/gojenkins" target="_blank" rel="external">https://godoc.org/github.com/bndr/gojenkins</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/06/21/jenkins-cli-md/../jenkins-cli-md/jenkins-logo.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;文档简介&quot;&gt;&lt;a href=&quot;#文档简介&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>排查docker中supervisord托管服务不能启动问题</title>
    <link href="http://meowbite.github.io/2018/06/08/docker-supervisord-md/"/>
    <id>http://meowbite.github.io/2018/06/08/docker-supervisord-md/</id>
    <published>2018-06-08T02:44:36.000Z</published>
    <updated>2018-06-08T03:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h1><p>线上case，记录、研究、总结</p><h1 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h1><p>在docker容器中，发现supervisord托管的服务不能启动了。报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">supervisor: couldn&apos;t exec /home/abc/control.sh: EAGAIN</div><div class="line">supervisor: child process was not spawned</div><div class="line">supervisor: couldn&apos;t exec /home/abc/control.sh: EAGAIN</div><div class="line">supervisor: child process was not spawned</div><div class="line">supervisor: couldn&apos;t exec /home/abc/control.sh: EAGAIN</div><div class="line">supervisor: child process was not spawned</div></pre></td></tr></table></figure><h1 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h1><ul><li>不使用supervisord，服务可以启动</li><li>容器飘走，在别的机器上可以启动</li><li>supervisord启动的进程和非supervisord托管的进程 Max processes值不一样（容器小于主机上的值）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">非supervisord进程</div><div class="line">$cat /proc/25754/limits</div><div class="line">Limit                     Soft Limit           Hard Limit           Units</div><div class="line">Max processes             514702               514702               processes</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">supervisord启动的进程</div><div class="line">$cat /proc/25756/limits</div><div class="line">Limit                     Soft Limit           Hard Limit           Units</div><div class="line">Max processes             10000                10000                processes</div></pre></td></tr></table></figure><ul><li>有问题容器的主机上有线程超过10000的进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ps -T  2454|wc -l</div><div class="line">5000</div></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ul><li>将supervisord源码中，默认添加的limit值进行修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#centos6上supervisord在/etc/init.d/supervisord</div><div class="line">#centos7上supervisord在/usr/bin/start_supervisord.sh</div><div class="line">$cat /usr/bin/start_supervisord.sh</div><div class="line">#!/bin/bash</div><div class="line">DAEMON_COREFILE_LIMIT=100000000</div><div class="line">ulimit -c 100000000</div><div class="line">ulimit -d unlimited</div><div class="line">ulimit -e 0</div><div class="line">ulimit -f unlimited</div><div class="line">ulimit -i 600000</div><div class="line">ulimit -l 64</div><div class="line">ulimit -m unlimited</div><div class="line">ulimit -n 1000000</div><div class="line">ulimit -q 819200</div><div class="line">ulimit -r 0</div><div class="line">ulimit -s 102400</div><div class="line">ulimit -t unlimited</div><div class="line">ulimit -u 10000</div><div class="line">ulimit -v unlimited</div><div class="line">ulimit -x unlimited</div><div class="line">/usr/bin/supervisord -c /etc/supervisord.conf</div></pre></td></tr></table></figure><p>修改过后容器里supervisord里服务就可以正常启动了。</p><h1 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h1><ul><li>supervisord里有专门设置ulimit的地方。</li><li>容器里进程的limit相关值，是和主机共享的。</li><li><p>查看所有线程命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ps -T PID</div></pre></td></tr></table></figure></li><li><p>线程数也会算在容器里 ulimit -u 中的值中。</p></li><li>查看进程里正在生效的limits值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$cat /proc/PID/limits</div></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">http://liyangliang.me/posts/2015/06/using-supervisor/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h1&gt;&lt;p&gt;线上case，记录、研究、总结&lt;/p&gt;
&lt;h1 id=&quot;场景再现&quot;&gt;&lt;a href=&quot;#场景再现&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="docker运维" scheme="http://meowbite.github.io/tags/docker%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>docker 分层结构问题汇总</title>
    <link href="http://meowbite.github.io/2018/05/29/docker-questions-md/"/>
    <id>http://meowbite.github.io/2018/05/29/docker-questions-md/</id>
    <published>2018-05-29T08:29:47.000Z</published>
    <updated>2018-06-01T03:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h1><p>由于docker镜像的分层结构，会引起一些列的使用上的问题。本文档将介绍由于镜像分层引入的一些问题，以便更好地利用docker提供服务。<br>镜像分层结构最大的特性是Copy-on-Write：</p><ul><li>新数据会直接存放在最上面的容器层。</li><li>修改现有数据会先从镜像层数据复制到容器层，修改后的数据直接保存在容器层中，镜像层保持不变。</li><li>如果多个层中有命名相同的文件，用户只能看到最上面那层中的文件。</li></ul><h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul><li>docker版本： 1.13.1</li><li>docker storage driver：overlayfs2</li><li>os版本：centos7.2 </li><li>内核版本：3.10.0-514.10.1.el7.toa.x86_64</li></ul><h1 id="问题一：原生的tail-f-不可用"><a href="#问题一：原生的tail-f-不可用" class="headerlink" title="问题一：原生的tail -f 不可用"></a>问题一：原生的tail -f 不可用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#启动一个容器，/tmp目录使用主机的本地存储</div><div class="line">$docker run -v /tmp:/tmp -d  registry.xiaojukeji.com/didionline/abcd-chencongtest:stable</div><div class="line">#/tmp是主机存储xfs， 其他目录是overlayfs2</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">rootfs          5.9T  3.5T  2.5T  59% /</div><div class="line">overlay         5.9T  3.5T  2.5T  59% /</div><div class="line">/dev/sda5       298G  206M  298G   1% /tmp</div></pre></td></tr></table></figure><ul><li><p>实验一：在/tmp目录下使用tail -f 可以看到日志滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@7f2d9a163935:/tmp$ tail -f test.log</div><div class="line">root@7f2d9a163935:/tmp$ date &gt;&gt;test.log</div><div class="line">root@7f2d9a163935:/tmp$ tail -f test.log</div><div class="line">Fri Jun  1 09:44:18 CST 2018</div></pre></td></tr></table></figure></li><li><p>实验二：在非/tmp目录下，tail -f 日志不滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@7f2d9a163935:/home$ tail -f test.log</div><div class="line">root@7f2d9a163935:/tmp$ date &gt;&gt;test.log</div><div class="line">root@7f2d9a163935:/tmp$ tail -f test.log #tail -f 没有获取到文件里的内容</div></pre></td></tr></table></figure></li><li><p>总结：<br>tail -f 原理是从“一个文件”获取内容并且跟踪文件内容，输出到终端。<br>在overlayfs下，内容增加了，Copy-on-Write，新的文件替换了老的文件，所以就不能看到新文件的tail结果了。<br>如果想在overlayfs下使用tail -f，需要修改tail源码或者使用替代命令，如：<a href="https://github.com/kasun/python-tail" target="_blank" rel="external">https://github.com/kasun/python-tail</a></p></li></ul><h1 id="问题二：删除上层数据报错"><a href="#问题二：删除上层数据报错" class="headerlink" title="问题二：删除上层数据报错"></a>问题二：删除上层数据报错</h1><ul><li><p>实验一：docker build阶段 删除上层文件失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$:~/test$ docker build --pull --no-cache  -t  miao .</div><div class="line">Status: Image is up to date for registry.xiaojukeji.com/didibase/didi-centos6-base:stable</div><div class="line"> ---&gt; 6367306c24b2</div><div class="line">Step 2/5 : MAINTAINER zhangmiao &lt;zhangmiao@diditaxi.com.cn&gt;</div><div class="line"> ---&gt; Running in eadf94a4a7b6</div><div class="line"> ---&gt; 5f14366c1655</div><div class="line">Removing intermediate container eadf94a4a7b6</div><div class="line">Step 3/5 : RUN mkdir -p  /home/miao</div><div class="line"> ---&gt; Running in e4679169367a</div><div class="line"> ---&gt; a4437c938f68</div><div class="line">Removing intermediate container e4679169367a</div><div class="line">Step 4/5 : COPY test.conf /home/miao</div><div class="line"> ---&gt; 5e91dc11f4d1</div><div class="line">Removing intermediate container 9d1ccb0b0fd6</div><div class="line">Step 5/5 : RUN rm -rf /home/miao/test.conf &amp;&amp; ls -l /home/miao/  # chown、chmod等操作也会失败</div><div class="line"> ---&gt; Running in 1af10f6c3f6d</div><div class="line">total 0</div><div class="line">?????????? ? ? ? ?            ? test.conf</div><div class="line">ls: cannot access /home/miao/test.conf: No such file or directory </div><div class="line">The command &apos;/bin/sh -c rm -rf /home/miao/test.conf &amp;&amp; ls -l /home/miao/&apos; returned a non-zero code: 1</div></pre></td></tr></table></figure></li><li><p>实验二：容器内删除上层文件失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$docker exec -it 7f2d9a163 bash </div><div class="line">$cd /etc/ ; rm -rf yum.conf</div><div class="line"></div><div class="line">root@7f2d9a163935:/etc$ ls  yum.conf</div><div class="line">ls: cannot access yum.conf: No such file or directory</div><div class="line"></div><div class="line"></div><div class="line">$ls -l  /etc</div><div class="line">?????????? ? ?     ?         ?            ? yum.conf</div></pre></td></tr></table></figure></li><li><p>总结：<br>使用容器的时候，不能完全照搬物理机使用思维。<br>写Dockerfile的时候，要注意层级关系。<br>在容器内，也要考虑镜像层级关系。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h1&gt;&lt;p&gt;由于docker镜像的分层结构，会引起一些列的使用上的问题。本文档将介绍由于镜像分层引入的一些问题，以便更好地利用docke
      
    
    </summary>
    
    
      <category term="docker进阶" scheme="http://meowbite.github.io/tags/docker%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>巧用overlayfs特性，优化镜像SIZE</title>
    <link href="http://meowbite.github.io/2018/05/24/docker-images-size-md/"/>
    <id>http://meowbite.github.io/2018/05/24/docker-images-size-md/</id>
    <published>2018-05-24T09:08:58.000Z</published>
    <updated>2018-05-25T02:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h2><ul><li>总结一下docker镜像大小优化的心得。</li></ul><h2 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h2><p>一旦开始Docker镜像大小的优化工作，说的比较多的就是镜像层数的优化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">FROM      $URL/abcd/centos6.7:official</div><div class="line">MAINTAINER meow &lt;msupers@163.com&gt;</div><div class="line">#COPY base conf</div><div class="line">COPY yum.conf resolve.conf /etc/</div><div class="line"></div><div class="line">#COPY supervisor conf</div><div class="line">COPY etc/supervisord.conf  /etc/</div><div class="line">COPY etc/supervisord.d /etc/supervisord.d</div><div class="line"></div><div class="line">#COPY soft to images </div><div class="line">COPY nginx /home/nginx</div><div class="line">COPY php /home/php</div><div class="line">...</div></pre></td></tr></table></figure></p><p>如上面所示，我们写Dockerfile的时候，往往会按照物理机的使用模式，一步一步的增加配置和软件等。<br>可读性增加了，但是层数会越来越多。</p><h2 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h2><p>将目标的目录结构，在COPY的源上做好，达到减少镜像制作层数的目的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FROM      $URL/abcd/centos6.7:official</div><div class="line">MAINTAINER meow &lt;msupers@163.com&gt;</div><div class="line">#COPY base conf to images ， etc下放好文件并保持相应结构</div><div class="line">COPY etc /etc    </div><div class="line"></div><div class="line">#COPY soft to images ，home下放好目标文件并保持相应结构</div><div class="line">COPY home /home</div></pre></td></tr></table></figure></p><p>如上所示，原本很多层的镜像，得到很大程度的优化。</p><h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><ul><li>利用overlayfs特性，不用担心源文件夹，替换目标文件夹，效果上和rsync的使用效果有点像。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/qq_36763896/article/details/53293088" target="_blank" rel="external">https://blog.csdn.net/qq_36763896/article/details/53293088</a></li><li><a href="https://zh.wikipedia.org/wiki/OverlayFS" target="_blank" rel="external">https://zh.wikipedia.org/wiki/OverlayFS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;总结一下docker镜像大小优化的心得。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;场景再现&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="docker进阶" scheme="http://meowbite.github.io/tags/docker%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用cgroup限制docker容器磁盘IO</title>
    <link href="http://meowbite.github.io/2018/05/24/docker-cgroup-md/"/>
    <id>http://meowbite.github.io/2018/05/24/docker-cgroup-md/</id>
    <published>2018-05-24T03:13:06.000Z</published>
    <updated>2018-05-24T06:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h2><ul><li>学习cgroup关于磁盘io限制的内容。</li><li>记录在k8s pods下，容器里某个分区的磁盘限制方法。</li></ul><h2 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h2><p>在使用过程中，我们需要对容器的磁盘io读写进行限制：<br>容器id：0349448c87f13d776533ed7c372d7d63727fc0022a9b8974440ae492aa93f540<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@$hostname:/$ df -h</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">overlay          20G  609M   20G   3% /</div><div class="line">tmpfs           126G  4.0K  126G   1% /dev</div><div class="line">tmpfs           126G     0  126G   0% /sys/fs/cgroup</div><div class="line">/dev/md1         80G  714M   80G   1% /home</div><div class="line">/dev/md0p3       37G   16G   20G  45% /etc/hosts</div><div class="line">shm              64M     0   64M   0% /dev/shm</div><div class="line">tmpfs           126G   12K  126G   1% /run/secrets/kubernetes.io/serviceaccount</div><div class="line">tmpfs           126G     0  126G   0% /sys/firmware</div></pre></td></tr></table></figure></p><p>主机上cgroup对应位置：<br>/sys/fs/cgroup/blkio/$CgroupParent/$ContainerID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@$hostname:/sys/fs/cgroup/blkio/kubepods/burstable/pod46eadc04-59bd-11e8-ad12-246e9693c184/0349448c87f13d776533ed7c372d7d63727fc0022a9b8974440ae492aa93f540$ ls</div><div class="line">blkio.io_merged                   blkio.io_serviced                blkio.leaf_weight                blkio.throttle.io_serviced        blkio.time_recursive   notify_on_release</div><div class="line">blkio.io_merged_recursive         blkio.io_serviced_recursive      blkio.leaf_weight_device         blkio.throttle.read_bps_device    blkio.weight           tasks</div><div class="line">blkio.io_queued                   blkio.io_service_time            blkio.reset_stats                blkio.throttle.read_iops_device   blkio.weight_device</div><div class="line">blkio.io_queued_recursive         blkio.io_service_time_recursive  blkio.sectors                    blkio.throttle.write_bps_device   cgroup.clone_children</div><div class="line">blkio.io_service_bytes            blkio.io_wait_time               blkio.sectors_recursive          blkio.throttle.write_iops_device  cgroup.event_control</div><div class="line">blkio.io_service_bytes_recursive  blkio.io_wait_time_recursive     blkio.throttle.io_service_bytes  blkio.time</div></pre></td></tr></table></figure></p><p>blkio内容很多，大部分是只读报告，可写的参数有如下几个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">blkio.throttle.read_bps_device #每秒能读取的字节数</div><div class="line">blkio.throttle.read_iops_device</div><div class="line">blkio.throttle.write_bps_device</div><div class="line">blkio.throttle.write_iops_device</div><div class="line">blkio.weight</div><div class="line">blkio.weight_device</div></pre></td></tr></table></figure></p><p>对/home分区（知识总结里会介绍为什么是/home分区）做了如下操作，读800M，写200M限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$cat blkio.throttle.read_bps_device </div><div class="line">9:1 83886080</div><div class="line">$cat blkio.throttle.write_bps_device </div><div class="line">9:1 20971520</div></pre></td></tr></table></figure></p><h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><ul><li><p>限制磁盘IO的文件如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">blkio.throttle.read_bps_device</div><div class="line">blkio.throttle.read_iops_device</div><div class="line">blkio.throttle.write_bps_device</div><div class="line">blkio.throttle.write_iops_device</div><div class="line">blkio.weight</div><div class="line">blkio.weight_device</div></pre></td></tr></table></figure></li><li><p>上述的9:1是主设备号和副设备号:<br>物理机上操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ls -l  /dev/md1</div><div class="line">brw-rw---- 1 root disk 9, 1 Feb 27 18:01 /dev/md1 #9是主设备号，1是副设备号</div></pre></td></tr></table></figure></li><li><p>限制方法可分为throttle（节流阀）和weight（权重）两种</p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://xiezhenye.com/2013/10/%E7%94%A8-cgroups-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B%E7%A3%81%E7%9B%98-io.html" target="_blank" rel="external">https://xiezhenye.com/2013/10/%E7%94%A8-cgroups-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B%E7%A3%81%E7%9B%98-io.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;学习cgroup关于磁盘io限制的内容。&lt;/li&gt;
&lt;li&gt;记录在k8s pods下，容器里某个分区的磁盘限制方
      
    
    </summary>
    
    
      <category term="docker进阶" scheme="http://meowbite.github.io/tags/docker%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>linux运维进阶-free命令的学习</title>
    <link href="http://meowbite.github.io/2018/05/23/linux-free-md/"/>
    <id>http://meowbite.github.io/2018/05/23/linux-free-md/</id>
    <published>2018-05-23T03:39:10.000Z</published>
    <updated>2018-05-23T07:18:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h2><ul><li>深入学习free命令在运维中的使用</li><li>实战中总结常用命令，加深理解</li></ul><h2 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h2><pre><code>在生产环境中，我们使用了一台安装了docker的机器来做镜像。</code></pre><p>当同时执行大量docker build命令，并且Dockerfile引用的文件巨大时(大量数据会读入内存，使用完成后才释放)，会造成内存不够的报警。<br>此时需要运用free命令，查看系统状态和问题处理。</p><h2 id="free命令知识点总结"><a href="#free命令知识点总结" class="headerlink" title="free命令知识点总结"></a>free命令知识点总结</h2><p>与上述问题无关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$free</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:      131777608     7835208      659484     4203836   123282916   117500900</div><div class="line">Swap:             0           0           0</div></pre></td></tr></table></figure></p><ul><li>buff: A buffer is something that has yet to be “written” to disk.</li><li>cache: A cache is something that has been “read” from the disk and stored for later use.</li><li>total  = used + free</li><li><p>释放掉被系统cache占用的数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo 3&gt;/proc/sys/vm/drop_caches</div></pre></td></tr></table></figure></li><li><p>free命令由procps.*.rpm提供（在Redhat系列的OS上）。free命令的所有输出值都是从/proc/meminfo中读出的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$which free</div><div class="line">/bin/free</div><div class="line">$rpm -qf /bin/free</div><div class="line">procps-ng-3.3.10-3.el7.x86_64</div></pre></td></tr></table></figure></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/free.html" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/free.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;深入学习free命令在运维中的使用&lt;/li&gt;
&lt;li&gt;实战中总结常用命令，加深理解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="linux运维进阶" scheme="http://meowbite.github.io/tags/linux%E8%BF%90%E7%BB%B4%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7.2 上安装docker CE 18.05</title>
    <link href="http://meowbite.github.io/2018/05/23/docker-install/"/>
    <id>http://meowbite.github.io/2018/05/23/docker-install/</id>
    <published>2018-05-23T02:44:01.000Z</published>
    <updated>2018-05-24T03:16:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h2><ul><li>记录搭建docker CE 18.05在centos 7.2上的安装过程</li></ul><h2 id="docker-CE-18-05-0-ce-install"><a href="#docker-CE-18-05-0-ce-install" class="headerlink" title="docker CE 18.05.0-ce install"></a>docker CE 18.05.0-ce install</h2><p>OS INFO</p><ul><li>OS-VERSION: CentOS Linux release 7.2.1511 (Core)</li><li>Kernel: Linux 99-22.test 3.10.0-514.16.1.el7.x86_64 #1 SMP Wed Apr 12 15:04:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</li></ul><h2 id="Uninstall-old-version"><a href="#Uninstall-old-version" class="headerlink" title="Uninstall old version"></a>Uninstall old version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo yum remove docker \</div><div class="line">                  docker-client \</div><div class="line">                  docker-client-latest \</div><div class="line">                  docker-common \</div><div class="line">                  docker-latest \</div><div class="line">                  docker-latest-logrotate \</div><div class="line">                  docker-logrotate \</div><div class="line">                  docker-selinux \</div><div class="line">                  docker-engine-selinux \</div><div class="line">                  docker-engine</div></pre></td></tr></table></figure><h2 id="Install-required-packages"><a href="#Install-required-packages" class="headerlink" title="Install required packages"></a>Install required packages</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum install -y yum-utils \</div><div class="line">  device-mapper-persistent-data \</div><div class="line">  lvm2</div></pre></td></tr></table></figure><h2 id="Enable-the-edge-or-test-repository-Optional"><a href="#Enable-the-edge-or-test-repository-Optional" class="headerlink" title="Enable the edge or test repository (Optional)"></a>Enable the edge or test repository (Optional)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum-config-manager --enable docker-ce-edge \</div><div class="line">## sudo yum-config-manager --disable docker-ce-edge \</div><div class="line">## sudo yum-config-manager --enable docker-ce-test</div></pre></td></tr></table></figure><h2 id="List-avaliable-Docker-CE-Packages"><a href="#List-avaliable-Docker-CE-Packages" class="headerlink" title="List avaliable Docker CE Packages"></a>List avaliable Docker CE Packages</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@99-22 ~]# yum list docker-ce --showduplicates | sort -r</div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Installed Packages</div><div class="line">docker-ce.x86_64            18.05.0.ce-3.el7.centos             installed       </div><div class="line">docker-ce.x86_64            18.05.0.ce-3.el7.centos             docker-ce-edge  </div><div class="line">docker-ce.x86_64            18.04.0.ce-3.el7.centos             docker-ce-edge  </div><div class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</div><div class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-edge  </div><div class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</div><div class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-edge  </div><div class="line">docker-ce.x86_64            18.02.0.ce-1.el7.centos             docker-ce-edge  </div><div class="line">docker-ce.x86_64            18.01.0.ce-1.el7.centos             docker-ce-edge  </div><div class="line">...</div><div class="line">Determining fastest mirrors</div><div class="line">Available Packages</div></pre></td></tr></table></figure><h2 id="Install-from-remote-repository"><a href="#Install-from-remote-repository" class="headerlink" title="Install from remote repository"></a>Install from remote repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install docker-ce-18.05.0.ce -y</div></pre></td></tr></table></figure><h2 id="Or-Install-from-local-rpms"><a href="#Or-Install-from-local-rpms" class="headerlink" title="Or Install from local rpms"></a>Or Install from local rpms</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -O https://download.docker.com/linux/centos/7/x86_64/edge/Packages/docker-ce-18.05.0.ce-3.el7.centos.x86_64.rpm \</div><div class="line">&amp;&amp; yum install docker-ce-18.05.0.ce-3.el7.centos.x86_64.rpm</div></pre></td></tr></table></figure><h2 id="Start-docker-service"><a href="#Start-docker-service" class="headerlink" title="Start docker service"></a>Start docker service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start docker</div></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>xfs系统格式化的时候需要开启f_type 保障overlayfs性能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker info</div><div class="line"> Supports d_type: true</div></pre></td></tr></table></figure></li><li><p>启动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /usr/lib/systemd/system/docker.service</div><div class="line">ExecStart=/usr/bin/dockerd  --storage-opt overlay2.override_kernel_check=1\</div><div class="line"> --storage-driver=overlay2 --graph=/home/docker</div></pre></td></tr></table></figure></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="external">https://docs.docker.com/install/linux/docker-ce/centos/</a></li><li><a href="https://docs.docker.com/release-notes/docker-ce/" target="_blank" rel="external">https://docs.docker.com/release-notes/docker-ce/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;记录搭建docker CE 18.05在centos 7.2上的安装过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="docker基础" scheme="http://meowbite.github.io/tags/docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose学习（一）</title>
    <link href="http://meowbite.github.io/2017/09/20/docker-compose/"/>
    <id>http://meowbite.github.io/2017/09/20/docker-compose/</id>
    <published>2017-09-20T02:44:01.000Z</published>
    <updated>2018-05-24T03:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Compose 是 Docker 官方编排（Orchestration）项目之一，负责实现对 Docker <em>容器集群</em> 的快速编排。在需要定义和运行多个 Docker 容器时使用。</p><p>其代码目前在 <a href="https://github.com/docker/compose" target="_blank" rel="external">https://github.com/docker/compose</a> 上开源。</p><p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li>服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目(project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</li></ul><p>Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>在日常工作中，我们经常会遇到<em>多</em>个容器共同提供服务的场景。如：一个web服务，除了web服务器，还需要数据库。Compose刚好满足这样的需求，它允许用户通过 一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>官方网站上提供依据编译好的二进制包：<a href="https://github.com/docker/compose/releases" target="_blank" rel="external">https://github.com/docker/compose/releases</a></p><p>在linux系统中，我们一般直接下载编译好的二进制包来使用。</p><p>Compose file format compatibility matrix:</p><table><thead><tr><th style="text-align:left">Compose file format</th><th style="text-align:center">Docker Engine</th></tr></thead><tbody><tr><td style="text-align:left">3.3</td><td style="text-align:center">17.06.0+</td></tr><tr><td style="text-align:left">3.0-3.2</td><td style="text-align:center">1.13.0+</td></tr><tr><td style="text-align:left">2.3</td><td style="text-align:center">17.06.0+</td></tr><tr><td style="text-align:left">2.2</td><td style="text-align:center">1.13.0+</td></tr></tbody></table><p><code>`$ sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-</code>uname -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose</p><p>$ sudo chmod a+x /usr/local/bin/docker-compose</p><p>``</p><h3 id="PIP安装"><a href="#PIP安装" class="headerlink" title="PIP安装"></a>PIP安装</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Compose 是 Docker 官方编排（Orchestration）项目之一，负责实现对 Docker &lt;em&gt;容器集群&lt;/em&gt; 的快速编排。在需要定义和运行多个 Docker 容器时使用。&lt;/p&gt;
&lt;p&gt;其代码目前在 &lt;a href=&quot;https://github.
      
    
    </summary>
    
    
      <category term="docker基础" scheme="http://meowbite.github.io/tags/docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
