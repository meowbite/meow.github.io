<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meowbite</title>
  
  <subtitle>认真生活~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meowbite.github.io/"/>
  <updated>2017-09-26T06:12:51.000Z</updated>
  <id>http://meowbite.github.io/</id>
  
  <author>
    <name>meow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell中几个易混难记得的变量</title>
    <link href="http://meowbite.github.io/2017/09/26/parameter/"/>
    <id>http://meowbite.github.io/2017/09/26/parameter/</id>
    <published>2017-09-26T02:09:28.000Z</published>
    <updated>2017-09-26T06:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特殊变量列表"><a href="#特殊变量列表" class="headerlink" title="特殊变量列表"></a>特殊变量列表</h2><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">$0</td><td style="text-align:left">当前脚本的文件名</td></tr><tr><td style="text-align:left">$n</td><td style="text-align:left">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td></tr><tr><td style="text-align:left">$#</td><td style="text-align:left">传递给脚本或函数的参数个数。</td></tr><tr><td style="text-align:left">$*</td><td style="text-align:left">传递给脚本或函数的所有参数。</td></tr><tr><td style="text-align:left">$@</td><td style="text-align:left">传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td></tr><tr><td style="text-align:left">$?</td><td style="text-align:left">上个命令的退出状态，或函数的返回值。</td></tr><tr><td style="text-align:left">$$</td><td style="text-align:left">当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。</p><p>示例脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">echo &quot;File Name: $0&quot;</div><div class="line">echo &quot;First Parameter : $1&quot;</div><div class="line">echo &quot;First Parameter : $2&quot;</div><div class="line">echo &quot;Quoted Values: $@&quot;</div><div class="line">echo &quot;Quoted Values: $*&quot;</div><div class="line">echo &quot;Total Number of Parameters : $#&quot;</div></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$./test.sh Zara Ali</div><div class="line">File Name : ./test.sh</div><div class="line">First Parameter : Zara</div><div class="line">Second Parameter : Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Total Number of Parameters : 2</div></pre></td></tr></table></figure><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a>$* 和 $@ 的区别</h2><p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p><p>如示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;\$*=&quot; $*</div><div class="line">echo &quot;\&quot;\$*\&quot;=&quot; &quot;$*&quot;</div><div class="line"></div><div class="line">echo &quot;\$@=&quot; $@</div><div class="line">echo &quot;\&quot;\$@\&quot;=&quot; &quot;$@&quot;</div><div class="line"></div><div class="line">echo &quot;print each param from \$*&quot;</div><div class="line">for var in $*</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \$@&quot;</div><div class="line">for var in $@</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \&quot;\$*\&quot;&quot;</div><div class="line">for var in &quot;$*&quot;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \&quot;\$@\&quot;&quot;</div><div class="line">for var in &quot;$@&quot;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div></pre></td></tr></table></figure><p>执行 ./test.sh “a” “b” “c” “d”，看到下面的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$*=  a b c d</div><div class="line">&quot;$*&quot;= a b c d</div><div class="line">$@=  a b c d</div><div class="line">&quot;$@&quot;= a b c d</div><div class="line">print each param from $*</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from $@</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from &quot;$*&quot;</div><div class="line">a b c d</div><div class="line">print each param from &quot;$@&quot;</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p>$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p><p>下面例子中，命令成功执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$./test.sh Zara Ali</div><div class="line">File Name : ./test.sh</div><div class="line">First Parameter : Zara</div><div class="line">Second Parameter : Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Total Number of Parameters : 2</div><div class="line">$echo $?</div><div class="line">0</div><div class="line">$</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特殊变量列表&quot;&gt;&lt;a href=&quot;#特殊变量列表&quot; class=&quot;headerlink&quot; title=&quot;特殊变量列表&quot;&gt;&lt;/a&gt;特殊变量列表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;变量&lt;/th&gt;

      
    
    </summary>
    
    
      <category term="shell" scheme="http://meowbite.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose学习（一）</title>
    <link href="http://meowbite.github.io/2017/09/20/docker-compose/"/>
    <id>http://meowbite.github.io/2017/09/20/docker-compose/</id>
    <published>2017-09-20T02:44:01.000Z</published>
    <updated>2017-09-26T06:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/20/docker-compose/docker-compose-logo.png" alt=""></p><p>Compose 是 Docker 官方编排（Orchestration）项目之一，负责实现对 Docker <em>容器集群</em> 的快速编排。在需要定义和运行多个 Docker 容器时使用。</p><p>其代码目前在 <a href="https://github.com/docker/compose" target="_blank" rel="external">https://github.com/docker/compose</a> 上开源。</p><p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li>服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目(project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</li></ul><p>Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>在日常工作中，我们经常会遇到<em>多</em>个容器共同提供服务的场景。如：一个web服务，除了web服务器，还需要数据库。Compose刚好满足这样的需求，它允许用户通过 一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>官方网站上提供依据编译好的二进制包：<a href="https://github.com/docker/compose/releases" target="_blank" rel="external">https://github.com/docker/compose/releases</a></p><p>在linux系统中，我们一般直接下载编译好的二进制包来使用。</p><p>Compose file format compatibility matrix:</p><table><thead><tr><th style="text-align:left">Compose file format</th><th style="text-align:center">Docker Engine</th></tr></thead><tbody><tr><td style="text-align:left">3.3</td><td style="text-align:center">17.06.0+</td></tr><tr><td style="text-align:left">3.0-3.2</td><td style="text-align:center">1.13.0+</td></tr><tr><td style="text-align:left">2.3</td><td style="text-align:center">17.06.0+</td></tr><tr><td style="text-align:left">2.2</td><td style="text-align:center">1.13.0+</td></tr></tbody></table><p><code>`$ sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-</code>uname -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose</p><p>$ sudo chmod a+x /usr/local/bin/docker-compose</p><p>``</p><h3 id="PIP安装"><a href="#PIP安装" class="headerlink" title="PIP安装"></a>PIP安装</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2017/09/20/docker-compose/docker-compose-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compose 是 Docker 官方编排（Orchestration）项目之一，负责实现对 Docker &lt;em&gt;容器
      
    
    </summary>
    
    
      <category term="docker" scheme="http://meowbite.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://meowbite.github.io/2017/09/19/hello-world/"/>
    <id>http://meowbite.github.io/2017/09/19/hello-world/</id>
    <published>2017-09-19T09:06:50.000Z</published>
    <updated>2017-09-19T09:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
